// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/onflow/flow-emulator/internal (interfaces: ArchiveAPIClient)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/archive.go -package=mocks github.com/onflow/flow-emulator/internal ArchiveAPIClient
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	archive "github.com/onflow/flow-archive/api/archive"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockArchiveAPIClient is a mock of ArchiveAPIClient interface.
type MockArchiveAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockArchiveAPIClientMockRecorder
}

// MockArchiveAPIClientMockRecorder is the mock recorder for MockArchiveAPIClient.
type MockArchiveAPIClientMockRecorder struct {
	mock *MockArchiveAPIClient
}

// NewMockArchiveAPIClient creates a new mock instance.
func NewMockArchiveAPIClient(ctrl *gomock.Controller) *MockArchiveAPIClient {
	mock := &MockArchiveAPIClient{ctrl: ctrl}
	mock.recorder = &MockArchiveAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArchiveAPIClient) EXPECT() *MockArchiveAPIClientMockRecorder {
	return m.recorder
}

// GetCollection mocks base method.
func (m *MockArchiveAPIClient) GetCollection(arg0 context.Context, arg1 *archive.GetCollectionRequest, arg2 ...grpc.CallOption) (*archive.GetCollectionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCollection", varargs...)
	ret0, _ := ret[0].(*archive.GetCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollection indicates an expected call of GetCollection.
func (mr *MockArchiveAPIClientMockRecorder) GetCollection(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollection", reflect.TypeOf((*MockArchiveAPIClient)(nil).GetCollection), varargs...)
}

// GetCommit mocks base method.
func (m *MockArchiveAPIClient) GetCommit(arg0 context.Context, arg1 *archive.GetCommitRequest, arg2 ...grpc.CallOption) (*archive.GetCommitResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommit", varargs...)
	ret0, _ := ret[0].(*archive.GetCommitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommit indicates an expected call of GetCommit.
func (mr *MockArchiveAPIClientMockRecorder) GetCommit(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommit", reflect.TypeOf((*MockArchiveAPIClient)(nil).GetCommit), varargs...)
}

// GetEvents mocks base method.
func (m *MockArchiveAPIClient) GetEvents(arg0 context.Context, arg1 *archive.GetEventsRequest, arg2 ...grpc.CallOption) (*archive.GetEventsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEvents", varargs...)
	ret0, _ := ret[0].(*archive.GetEventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockArchiveAPIClientMockRecorder) GetEvents(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockArchiveAPIClient)(nil).GetEvents), varargs...)
}

// GetFirst mocks base method.
func (m *MockArchiveAPIClient) GetFirst(arg0 context.Context, arg1 *archive.GetFirstRequest, arg2 ...grpc.CallOption) (*archive.GetFirstResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFirst", varargs...)
	ret0, _ := ret[0].(*archive.GetFirstResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirst indicates an expected call of GetFirst.
func (mr *MockArchiveAPIClientMockRecorder) GetFirst(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirst", reflect.TypeOf((*MockArchiveAPIClient)(nil).GetFirst), varargs...)
}

// GetGuarantee mocks base method.
func (m *MockArchiveAPIClient) GetGuarantee(arg0 context.Context, arg1 *archive.GetGuaranteeRequest, arg2 ...grpc.CallOption) (*archive.GetGuaranteeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGuarantee", varargs...)
	ret0, _ := ret[0].(*archive.GetGuaranteeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGuarantee indicates an expected call of GetGuarantee.
func (mr *MockArchiveAPIClientMockRecorder) GetGuarantee(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGuarantee", reflect.TypeOf((*MockArchiveAPIClient)(nil).GetGuarantee), varargs...)
}

// GetHeader mocks base method.
func (m *MockArchiveAPIClient) GetHeader(arg0 context.Context, arg1 *archive.GetHeaderRequest, arg2 ...grpc.CallOption) (*archive.GetHeaderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHeader", varargs...)
	ret0, _ := ret[0].(*archive.GetHeaderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeader indicates an expected call of GetHeader.
func (mr *MockArchiveAPIClientMockRecorder) GetHeader(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockArchiveAPIClient)(nil).GetHeader), varargs...)
}

// GetHeightForBlock mocks base method.
func (m *MockArchiveAPIClient) GetHeightForBlock(arg0 context.Context, arg1 *archive.GetHeightForBlockRequest, arg2 ...grpc.CallOption) (*archive.GetHeightForBlockResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHeightForBlock", varargs...)
	ret0, _ := ret[0].(*archive.GetHeightForBlockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeightForBlock indicates an expected call of GetHeightForBlock.
func (mr *MockArchiveAPIClientMockRecorder) GetHeightForBlock(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeightForBlock", reflect.TypeOf((*MockArchiveAPIClient)(nil).GetHeightForBlock), varargs...)
}

// GetHeightForTransaction mocks base method.
func (m *MockArchiveAPIClient) GetHeightForTransaction(arg0 context.Context, arg1 *archive.GetHeightForTransactionRequest, arg2 ...grpc.CallOption) (*archive.GetHeightForTransactionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetHeightForTransaction", varargs...)
	ret0, _ := ret[0].(*archive.GetHeightForTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeightForTransaction indicates an expected call of GetHeightForTransaction.
func (mr *MockArchiveAPIClientMockRecorder) GetHeightForTransaction(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeightForTransaction", reflect.TypeOf((*MockArchiveAPIClient)(nil).GetHeightForTransaction), varargs...)
}

// GetLast mocks base method.
func (m *MockArchiveAPIClient) GetLast(arg0 context.Context, arg1 *archive.GetLastRequest, arg2 ...grpc.CallOption) (*archive.GetLastResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLast", varargs...)
	ret0, _ := ret[0].(*archive.GetLastResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLast indicates an expected call of GetLast.
func (mr *MockArchiveAPIClientMockRecorder) GetLast(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLast", reflect.TypeOf((*MockArchiveAPIClient)(nil).GetLast), varargs...)
}

// GetRegisterValues mocks base method.
func (m *MockArchiveAPIClient) GetRegisterValues(arg0 context.Context, arg1 *archive.GetRegisterValuesRequest, arg2 ...grpc.CallOption) (*archive.GetRegisterValuesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRegisterValues", varargs...)
	ret0, _ := ret[0].(*archive.GetRegisterValuesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegisterValues indicates an expected call of GetRegisterValues.
func (mr *MockArchiveAPIClientMockRecorder) GetRegisterValues(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisterValues", reflect.TypeOf((*MockArchiveAPIClient)(nil).GetRegisterValues), varargs...)
}

// GetResult mocks base method.
func (m *MockArchiveAPIClient) GetResult(arg0 context.Context, arg1 *archive.GetResultRequest, arg2 ...grpc.CallOption) (*archive.GetResultResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResult", varargs...)
	ret0, _ := ret[0].(*archive.GetResultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResult indicates an expected call of GetResult.
func (mr *MockArchiveAPIClientMockRecorder) GetResult(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResult", reflect.TypeOf((*MockArchiveAPIClient)(nil).GetResult), varargs...)
}

// GetSeal mocks base method.
func (m *MockArchiveAPIClient) GetSeal(arg0 context.Context, arg1 *archive.GetSealRequest, arg2 ...grpc.CallOption) (*archive.GetSealResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSeal", varargs...)
	ret0, _ := ret[0].(*archive.GetSealResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeal indicates an expected call of GetSeal.
func (mr *MockArchiveAPIClientMockRecorder) GetSeal(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeal", reflect.TypeOf((*MockArchiveAPIClient)(nil).GetSeal), varargs...)
}

// GetTransaction mocks base method.
func (m *MockArchiveAPIClient) GetTransaction(arg0 context.Context, arg1 *archive.GetTransactionRequest, arg2 ...grpc.CallOption) (*archive.GetTransactionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransaction", varargs...)
	ret0, _ := ret[0].(*archive.GetTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockArchiveAPIClientMockRecorder) GetTransaction(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockArchiveAPIClient)(nil).GetTransaction), varargs...)
}

// ListCollectionsForHeight mocks base method.
func (m *MockArchiveAPIClient) ListCollectionsForHeight(arg0 context.Context, arg1 *archive.ListCollectionsForHeightRequest, arg2 ...grpc.CallOption) (*archive.ListCollectionsForHeightResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCollectionsForHeight", varargs...)
	ret0, _ := ret[0].(*archive.ListCollectionsForHeightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCollectionsForHeight indicates an expected call of ListCollectionsForHeight.
func (mr *MockArchiveAPIClientMockRecorder) ListCollectionsForHeight(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollectionsForHeight", reflect.TypeOf((*MockArchiveAPIClient)(nil).ListCollectionsForHeight), varargs...)
}

// ListSealsForHeight mocks base method.
func (m *MockArchiveAPIClient) ListSealsForHeight(arg0 context.Context, arg1 *archive.ListSealsForHeightRequest, arg2 ...grpc.CallOption) (*archive.ListSealsForHeightResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSealsForHeight", varargs...)
	ret0, _ := ret[0].(*archive.ListSealsForHeightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSealsForHeight indicates an expected call of ListSealsForHeight.
func (mr *MockArchiveAPIClientMockRecorder) ListSealsForHeight(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSealsForHeight", reflect.TypeOf((*MockArchiveAPIClient)(nil).ListSealsForHeight), varargs...)
}

// ListTransactionsForHeight mocks base method.
func (m *MockArchiveAPIClient) ListTransactionsForHeight(arg0 context.Context, arg1 *archive.ListTransactionsForHeightRequest, arg2 ...grpc.CallOption) (*archive.ListTransactionsForHeightResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTransactionsForHeight", varargs...)
	ret0, _ := ret[0].(*archive.ListTransactionsForHeightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactionsForHeight indicates an expected call of ListTransactionsForHeight.
func (mr *MockArchiveAPIClientMockRecorder) ListTransactionsForHeight(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactionsForHeight", reflect.TypeOf((*MockArchiveAPIClient)(nil).ListTransactionsForHeight), varargs...)
}
